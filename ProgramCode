#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Keypad.h>
#include "SoftwareSerial.h"
#include <DFPlayer_Mini_Mp3.h>
#include <HardwareSerial.h>
#include <Keypad_I2C.h>
#include <Adafruit_Fingerprint.h>
#include <WiFi.h>
#include <elapsedMillis.h>
Adafruit_Fingerprint finger = Adafruit_Fingerprint(&Serial2);

static const uint8_t PIN_MP3_RX = 25;
static const uint8_t PIN_MP3_TX = 26;

bool awal;
bool modekunci = false;
bool modeenroll = false;
bool joinfinger = false;
bool passcodemode = false;
bool proximityBool = false;

int solenoid = 27;
int buzzer = 15;
int ledM = 14;
int ledK = 12;
int ledH = 13;
int Proximity = 39;
#define IR 34

unsigned int id;
unsigned int id_delete;

int ProximityValue;
int ProximityDetect = 0;
int kesalahan = 0;
int fingerprint_flags = 1;
int frame = 0;
int kesalahanJari = 0;
int IRvalue = 0;
int IRdetect = 0;

const char* ssid     = "SkripsiESP32";
const char* password = "12345678";
const char* server = "maker.ifttt.com";
const char* NAMA;
const char* MasukDengan;

String Event_Name = "securitydoor";
String Key = "baSOknbNi4fQ6AZd7N6QAdDZ1m6MV6S3KLB2FIJuVU1";
String resource = "/trigger/" + Event_Name + "/with/key/" + Key;
String passcode = "";
String ID = "";

elapsedMillis passcodeTimer; // timer untuk mode passcode

SoftwareSerial mySerial(PIN_MP3_TX, PIN_MP3_RX);

#define SCREEN_WIDTH 128 // Lebar layar OLED
#define SCREEN_HEIGHT 64 // Tinggi layar OLED
Adafruit_SSD1306 oled(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);



#define LOGO_WIDTH    128 // Lebar Gambar Sidik Jari
#define LOGO_HEIGHT   64  // TInggi Gambar Sidik Jari
static const unsigned char PROGMEM sidikjari_bmp[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x83, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x03, 0xff, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x3f, 0xff, 0xf8, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0xff, 0xff, 0xfe, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0xe1, 0xff, 0x00, 0xff, 0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0xc7, 0xf0, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x8f, 0xc0, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x03, 0xff, 0xc1, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x0f, 0xff, 0xf0, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x3f, 0xff, 0xfc, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0x00, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xf1, 0xf8, 0x00, 0x1f, 0x8f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0xe3, 0xf0, 0x18, 0x0f, 0xc7, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0xc7, 0xc1, 0xff, 0x83, 0xe3, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0xc7, 0x87, 0xff, 0xe1, 0xf1, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0x8f, 0x1f, 0xff, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0x1e, 0x3f, 0x01, 0xf8, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0x1e, 0x7e, 0x00, 0x7c, 0x79, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x78, 0x00, 0x3e, 0x3d, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0xf0, 0xff, 0x1f, 0x3d, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x79, 0xe1, 0xff, 0x8f, 0x1c, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xf1, 0xe3, 0xff, 0xc7, 0x1e, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0xe3, 0xc7, 0xc3, 0xc7, 0x9e, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xe3, 0x8f, 0x01, 0xe7, 0x9e, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0xc7, 0x8f, 0x00, 0xe3, 0x9e, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0x8f, 0x9e, 0x18, 0xf3, 0x9e, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0e, 0x0f, 0x1e, 0x38, 0xf3, 0x9e, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x3c, 0x38, 0xf3, 0x9e, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x3c, 0x78, 0xf7, 0x9c, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x78, 0x78, 0xe7, 0x9c, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0xf0, 0xf1, 0xe7, 0x9c, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0xe1, 0xf1, 0xe1, 0xe7, 0x3c, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0xc3, 0xe3, 0xe3, 0xc7, 0x3c, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0x87, 0xc3, 0xc3, 0xcf, 0x3c, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x87, 0x87, 0x8f, 0x3c, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x0f, 0x0f, 0x8f, 0x38, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x1f, 0x1f, 0x0f, 0x3c, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x3e, 0x1e, 0x0f, 0x3d, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x7c, 0x3c, 0xcf, 0x3c, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0xf8, 0x79, 0xcf, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0xc1, 0xf0, 0xf9, 0xcf, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0x07, 0xe1, 0xf1, 0xc7, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0e, 0x0f, 0xc3, 0xe3, 0xc7, 0x87, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x07, 0xc3, 0xc7, 0x87, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x1f, 0x83, 0xc3, 0xc3, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x3e, 0x01, 0xc3, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x7c, 0x01, 0xc1, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0xf8, 0x01, 0xe0, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0xc3, 0xf3, 0xf8, 0xf0, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe7, 0xfc, 0xf8, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xcf, 0xfe, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x1f, 0x1e, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x3e, 0x0f, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x0f, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

#define CROSS_WIDTH  128 // Lebar Gambar Silang
#define CROSS_HEIGHT 64  // Tinggi Gambar Silang
static const unsigned char PROGMEM silang_bmp[] = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x0f, 0xff, 0xff, 
  0xff, 0xff, 0xf8, 0x00, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x00, 0x1f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x01, 0xff, 0xff, 
  0xff, 0xff, 0xc0, 0x00, 0x3f, 0xff, 0xe0, 0x00, 0x00, 0x01, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0x80, 0x00, 0x7f, 0xff, 0xf8, 0x00, 0x00, 0x07, 0xff, 0xff, 0x80, 0x00, 0x7f, 0xff, 
  0xff, 0xff, 0x00, 0x00, 0x3f, 0xff, 0xfe, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x00, 0x00, 0x3f, 0xff, 
  0xff, 0xfe, 0x00, 0x00, 0x1f, 0xff, 0xff, 0x00, 0x00, 0x3f, 0xff, 0xfe, 0x00, 0x00, 0x1f, 0xff, 
  0xff, 0xfc, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xc0, 0x00, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x0f, 0xff, 
  0xff, 0xfc, 0x00, 0x00, 0x03, 0xff, 0xff, 0xf0, 0x03, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x0f, 0xff, 
  0xff, 0xf8, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x07, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x07, 0xff, 
  0xff, 0xf0, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xfe, 0x1f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x03, 0xff, 
  0xff, 0xf0, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x03, 0xff, 
  0xff, 0xf0, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x03, 0xff, 
  0xff, 0xe0, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0xff, 0xe0, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0xff, 0xf0, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x03, 0xff, 
  0xff, 0xf0, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0x3f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x03, 0xff, 
  0xff, 0xf8, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xfe, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x07, 0xff, 
  0xff, 0xf8, 0x00, 0x00, 0x01, 0xff, 0xff, 0xf8, 0x07, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x07, 0xff, 
  0xff, 0xfc, 0x00, 0x00, 0x03, 0xff, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x0f, 0xff, 
  0xff, 0xfe, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x7f, 0xff, 0xfc, 0x00, 0x00, 0x1f, 0xff, 
  0xff, 0xfe, 0x00, 0x00, 0x3f, 0xff, 0xff, 0x00, 0x00, 0x3f, 0xff, 0xff, 0x00, 0x00, 0x1f, 0xff, 
  0xff, 0xff, 0x00, 0x00, 0x3f, 0xff, 0xfc, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x00, 0x00, 0x3f, 0xff, 
  0xff, 0xff, 0x80, 0x00, 0x7f, 0xff, 0xf0, 0x00, 0x00, 0x03, 0xff, 0xff, 0x80, 0x00, 0x7f, 0xff, 
  0xff, 0xff, 0xc0, 0x00, 0x3f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x7f, 0xfc, 0x00, 0x03, 0xff, 0xff, 
  0xff, 0xff, 0xf8, 0x00, 0x03, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xfe, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x1f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

#define LOCK_WIDTH 128
#define LOCK_HEIGHT 64
static const unsigned char PROGMEM lock_bmp[] = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xff, 0x80, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xff, 0xff, 0xff, 0x80, 0x03, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x80, 0x03, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x3f, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x3f, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 
  0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 
  0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff  
};

#define CEKLIST_WIDTH 128
#define CEKLIST_HEIGHT 64
static const unsigned char PROGMEM ceklist_bmp[] = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 
    0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x3f, 0xff, 0xff, 
    0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x1f, 0xff, 0xff, 
    0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf0, 0x00, 0x0f, 0xff, 0xff, 
    0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xfc, 0x00, 0x0f, 0xff, 0xff, 
    0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xfe, 0x00, 0x07, 0xff, 0xff, 
    0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xfe, 0x00, 0x07, 0xff, 0xff, 
    0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xfe, 0x00, 0x03, 0xff, 0xff, 
    0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xff, 
    0xff, 0xff, 0xc0, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xe0, 0x00, 0x03, 0xff, 0xff, 
    0xff, 0xff, 0xc0, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x7f, 0xff, 0xff, 0x80, 0x00, 0x03, 0xff, 0xff, 
    0xff, 0xff, 0xc0, 0x00, 0x7f, 0xff, 0x00, 0x01, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x03, 0xff, 0xff, 
    0xff, 0xff, 0xc0, 0x01, 0xff, 0xff, 0xc0, 0x07, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x03, 0xff, 0xff, 
    0xff, 0xff, 0xc0, 0x01, 0xff, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x03, 0xff, 0xff, 
    0xff, 0xff, 0xc0, 0x01, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x03, 0xff, 0xff, 
    0xff, 0xff, 0xe0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 
    0xff, 0xff, 0xe0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 
    0xff, 0xff, 0xf0, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 
    0xff, 0xff, 0xf0, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 
    0xff, 0xff, 0xf8, 0x00, 0x00, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 
    0xff, 0xff, 0xfc, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 
    0xff, 0xff, 0xfe, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0x00, 0x00, 0x03, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

#define I2CADDR 0x20 // Alamat I2C Untuk Keypad
const byte ROWS = 4; // 4 Baris
const byte COLS = 4; // 4 Kolom
char hexaKeys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};

byte rowPins[ROWS] = {0, 1, 2, 3}; // Koneksikan ke Modul I2C Keypad 0, 1, 2, 3
byte colPins[COLS] = {4, 5, 6, 7}; // Koneksikan ke Modul I2C Keypad 4, 5, 6, 7
Keypad_I2C customKeypad(makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS, I2CADDR);   

void setup() {
  Wire.begin();
  customKeypad.begin();
  mySerial.begin(9600);
  mp3_set_serial(mySerial);
  delay(10);
  mp3_set_volume(25);
  delay(10);

  pinMode(Proximity, INPUT);
  pinMode(solenoid, OUTPUT);
  pinMode(buzzer, OUTPUT);
  pinMode(ledM, OUTPUT);
  pinMode(ledK, OUTPUT);
  pinMode(ledH, OUTPUT);
  pinMode(IR, INPUT);
  digitalWrite(solenoid, HIGH);
  delay(1000);

  if (!oled.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { 
    Serial.println(F("SSD1306 allocation failed"));
    for (;;);
  }

  initWifi();
  
  oled.clearDisplay();
  oled.drawBitmap(0,0, sidikjari_bmp, LOGO_WIDTH, LOGO_HEIGHT, 1);
  oled.display();
}

void loop() {
  awal:

  char customKey = customKeypad.getKey(); 

  if (fingerprint_flags == 1) {
  setup_finger();
  oled.clearDisplay();
  oled.drawBitmap(0,0, sidikjari_bmp, LOGO_WIDTH, LOGO_HEIGHT, 1);
  oled.display();
  delay(1000);
  joinfinger = false;
    while (!joinfinger) {
      char customKey = customKeypad.getKey();
      loop_finger();
      ProximityValue = digitalRead(Proximity);
      IRvalue = digitalRead(IR);

      if (IRvalue == LOW && IRdetect == 0) {
        IRdetect = 1;
        bukapintu();
      }

      if (IRvalue == HIGH && IRdetect == 1) {
        IRdetect = 0;
      }
   
      if (ProximityValue == LOW && ProximityDetect == 0) {
        mp3_play(1);
        delay(1500);
        ProximityDetect = 1;
      }

      if (ProximityValue == HIGH && ProximityDetect == 1) {
        ProximityDetect = 0;
      }

      if (kesalahanJari == 3) {
          ID = 500;
          MasukDengan = "Berusaha Masuk";
          makeIFTTTRequest();
          delay(1000);
          kesalahanJari = 0;
          goto alarm;
      }

      if (customKey != NO_KEY) {
        if (customKey == 'A') {
          fingerprint_flags = 0;
          bunyi(200);
          bunyi(500);
          oled.clearDisplay();
          oled.display();
          passcode = "";
          passcodemode = true;
          passcodeTimer = 0;
          goto modekunci;
        }

        if (customKey == 'C') {
          fingerprint_flags = 0;
          bunyi(200);
          bunyi(500);
          oled.clearDisplay();
          oled.display();
          passcode = "";
          passcodemode = true;
          passcodeTimer = 0;
          goto modeenroll;
        }

        if (customKey == 'D') {
          fingerprint_flags = 0;
          bunyi(200);
          bunyi(500);
          oled.clearDisplay();
          oled.display();
          passcode = "";
          passcodemode = true;
          passcodeTimer = 0;
          goto modehapus;
        }
      }  
      finger.fingerID = 0;
    }
  }

  while(0) { //modekunci
    modekunci:
    oled.setTextSize(2);
    oled.setTextColor(SSD1306_WHITE);
    oled.setCursor(18, 15);
    oled.println("PASSCODE");
    oled.setCursor(40, 33); 
    oled.println("MODE!");
    oled.display();
    mp3_play(10);
    delay(3500);
    oled.clearDisplay();
    oled.display();
    while(1) {
      while (passcode.length() < 4) {
        digitalWrite(ledM, LOW);
        char customKey = customKeypad.getKey();
        oled.setTextSize(2);
        oled.setTextColor(SSD1306_WHITE);
        oled.setCursor(24, 0);
        oled.println("MASUKAN");
        oled.setCursor(17, 17); 
        oled.println("PASSCODE");
        oled.display();
        if (customKey != NO_KEY && isDigit(customKey) && customKey != 'B') {
          passcode += customKey;
          passcodeTimer = 0; //apabila mengetik reset timer
          bunyi(100);
          for (int z = 0; z < passcode.length(); z++) {
            oled.setTextSize(2);
            oled.setTextColor(SSD1306_WHITE);
            oled.setCursor(z * 38, 40);
            oled.println("*");
            oled.display();
          }
        }

        if (customKey != NO_KEY && customKey == 'B') {
          passcodemode = false;
          bunyi(100);
          fingerprint_flags = 1;
          kesalahan = 0;
          goto awal;
        }

        if (passcodemode && passcodeTimer > 15000) {
          passcodemode = false;
          fingerprint_flags = 1;
          kesalahan = 0;
          goto awal;
          Serial.println("Timed out. Back to initial state.");
        }
      }

      if (passcode == "1412") {
        bunyi(400);
        bunyi(200);
        digitalWrite(ledH, HIGH);
        oled.clearDisplay();
        oled.setTextSize(2);
        oled.setTextColor(SSD1306_WHITE);
        oled.setCursor(17, 15);
        oled.println("PASSWORD");
        oled.setCursor(30, 33); 
        oled.println("BENAR!");
        oled.display();
        mp3_play(2);
        delay(3000);
        bukapintu();
        kesalahan = 0;
        passcodemode = false;
        goto awal;
      } 
      
      else {
        bunyi(200);
        bunyi(200);
        digitalWrite(ledM, HIGH);
        mp3_play(4);
        oled.clearDisplay();
        oled.setTextSize(2);
        oled.setTextColor(SSD1306_WHITE);
        oled.setCursor(17, 15);
        oled.println("PASSWORD");
        oled.setCursor(30, 33); 
        oled.println("SALAH!");
        oled.display();
        kesalahan++;
        delay(3000);
        oled.clearDisplay();
        oled.display();
        passcodeTimer = 0;
        passcode = "";

        if (kesalahan == 3) {
          digitalWrite(ledM, LOW);
          passcodemode = false;
          passcodeTimer = 0;
          goto alarm;
        }
      }
    }
  }

  while (0) { //modeenroll
    modeenroll:
    oled.setTextSize(2);
    oled.setTextColor(SSD1306_WHITE);
    oled.setCursor(30, 15);
    oled.println("ENROLL");
    oled.setCursor(40, 33); 
    oled.println("MODE!");
    oled.display();
    mp3_play(11);
    delay(3500);
    oled.clearDisplay();
    oled.display();
    while (1) {
      while (passcode.length() < 4) {
        digitalWrite(ledM, LOW);
        char customKey = customKeypad.getKey();
        oled.setTextSize(2);
        oled.setTextColor(SSD1306_WHITE);
        oled.setCursor(24, 0);
        oled.println("MASUKAN");
        oled.setCursor(5, 17); 
        oled.println("KODE ENROL");
        oled.display();
        if (customKey != NO_KEY && isDigit(customKey) && customKey != 'B') {
          passcode += customKey;
          passcodeTimer = 0;
          bunyi(100);
          for (int z = 0; z < passcode.length(); z++) {
            oled.setTextSize(2);
            oled.setTextColor(SSD1306_WHITE);
            oled.setCursor(z * 38, 40);
            oled.println("*");
            oled.display();
          }
        }

        if (customKey != NO_KEY && customKey == 'B') {
          passcodemode = false;
          bunyi(100);
          fingerprint_flags = 1;
          kesalahan = 0;
          goto awal;
        }

        if (passcodemode && passcodeTimer > 15000) {
          passcodemode = false;
          fingerprint_flags = 1;
          kesalahan = 0;
          Serial.println("Kembali Ke awal;");
          goto awal;
        }
      }

      if (passcode == "2609") {
        bunyi(400);
        bunyi(200);
        oled.clearDisplay();
        oled.display();
        oled.setTextSize(2);
        oled.setTextColor(SSD1306_WHITE);
        oled.setCursor(17, 15);
        oled.println("PASSWORD");
        oled.setCursor(30, 33); 
        oled.println("BENAR!");
        oled.display();
        mp3_play(12);
        delay(2000);
        oled.clearDisplay();
        oled.display();
        kesalahan = 0;
        fingerprint_flags = 1;
        passcodemode = false;
        goto enrollsidikjari; 
      }

      else {
        bunyi(200);
        bunyi(200);
        digitalWrite(ledM, HIGH);
        mp3_play(4);
        oled.clearDisplay();
        oled.setTextSize(2);
        oled.setTextColor(SSD1306_WHITE);
        oled.setCursor(17, 15);
        oled.println("PASSWORD");
        oled.setCursor(30, 33); 
        oled.println("SALAH!");
        oled.display();
        kesalahan++;
        delay(3000);
        oled.clearDisplay();
        oled.display();
        passcodeTimer = 0;
        passcode = "";

        if (kesalahan == 3) {
          digitalWrite(ledM, LOW);
          passcodemode = false;
          passcodeTimer = 0;
          goto alarm;
        }
      }
    }
  }

  while (0) { //modehapussidikjari
    modehapus:
    oled.setTextSize(2);
    oled.setTextColor(SSD1306_WHITE);
    oled.setCursor(30, 15);
    oled.println("DELETE");
    oled.setCursor(40, 33); 
    oled.println("MODE!");
    oled.display();
    mp3_play(17);
    delay(3000);
    oled.clearDisplay();
    oled.display();
    while (1) {
      while (passcode.length() < 4) {
        digitalWrite(ledM, LOW);
        char customKey = customKeypad.getKey();
        oled.setTextSize(2);
        oled.setTextColor(SSD1306_WHITE);
        oled.setCursor(24, 0);
        oled.println("MASUKAN");
        oled.setCursor(5, 17); 
        oled.println("KODE HAPUS");
        oled.display();
        if (customKey != NO_KEY && isDigit(customKey) && customKey != 'B') {
          passcode += customKey;
          passcodeTimer = 0;
          bunyi(100);
          for (int z = 0; z < passcode.length(); z++) {
            oled.setTextSize(2);
            oled.setTextColor(SSD1306_WHITE);
            oled.setCursor(z * 38, 40);
            oled.println("*");
            oled.display();
          }
        }

        if (customKey != NO_KEY && customKey == 'B') {
          passcodemode = false;
          bunyi(100);
          fingerprint_flags = 1;
          kesalahan = 0;
          goto awal;
        }

        if (passcodemode && passcodeTimer > 15000) {
          passcodemode = false;
          fingerprint_flags = 1;
          kesalahan = 0;
          Serial.println("Kembali Ke awal;");
          goto awal;
        }
      }

      if (passcode == "1504") {
        bunyi(400);
        bunyi(200);
        oled.clearDisplay();
        oled.display();
        oled.setTextSize(2);
        oled.setTextColor(SSD1306_WHITE);
        oled.setCursor(17, 15);
        oled.println("PASSWORD");
        oled.setCursor(30, 33); 
        oled.println("BENAR!");
        oled.display();
        mp3_play(16);
        delay(2000);
        kesalahan = 0;
        fingerprint_flags = 1; // ubah nanti jika sudah ada enroll code
        passcodemode = false;
        goto hapussidikjari; // tukar dengan goto enroll nanti
      }

      else {
        bunyi(200);
        bunyi(200);
        digitalWrite(ledM, HIGH);
        mp3_play(4);
        oled.clearDisplay();
        oled.setTextSize(2);
        oled.setTextColor(SSD1306_WHITE);
        oled.setCursor(17, 15);
        oled.println("PASSWORD");
        oled.setCursor(30, 33); 
        oled.println("SALAH!");
        oled.display();
        kesalahan++;
        delay(3000);
        oled.clearDisplay();
        oled.display();
        passcodeTimer = 0;
        passcode = "";

        if (kesalahan == 3) {
          digitalWrite(ledM, LOW);
          passcodemode = false;
          passcodeTimer = 0;
          goto alarm;
        }
      }
    }
  }

  while (0) { //deletesidikjari
    hapussidikjari:
    oled.clearDisplay();
    oled.display();
    mp3_play(20);
    delay(3000);
    while (1) {
      setup_delete();
      loop_delete();
      fingerprint_flags = 1;
      goto awal;
    }
  }

  while (0) { //enrollSidikjari
    enrollsidikjari:
    mp3_play(13);
    delay(2000);
    while(1) {
      enroll_f();
      finger_enroll();
      fingerprint_flags = 1;
      goto awal;
    }  
  }  

  while (0) { //Alarm
    alarm:
    while (1) {
      mp3_play(5);
      oled.clearDisplay();
      oled.setTextSize(2);
      oled.setTextColor(SSD1306_WHITE);
      oled.setCursor(27, 0); 
      oled.println("SISTEM");
      oled.setCursor(17, 16); 
      oled.println("TERKUNCI");
      oled.setCursor(25,32);
      oled.println("SELAMA");
      oled.setCursor(15,48);
      oled.println("10 DETIK");
      oled.display();
      delay(5000);
      oled.clearDisplay();
      oled.display();
      digitalWrite(buzzer, HIGH);
      digitalWrite(ledK, HIGH);
      for (int a = 10; a >=0; a--) {
        oled.drawBitmap(0,0, lock_bmp, LOCK_WIDTH, LOCK_HEIGHT, 1);
        oled.display();
        delay(1000);
        if (a == 0) {
          kesalahan = 0;
          digitalWrite(buzzer, LOW);
          digitalWrite(ledK, LOW);
          digitalWrite(ledM, LOW);
          oled.clearDisplay();
          oled.display();
          passcodemode = false;
          passcodeTimer = 0;
          fingerprint_flags = 1;
          kesalahanJari = 0;
          goto awal;
        }
      }
    }
  }
}

void bukapintu() {
 digitalWrite(solenoid, LOW);
 digitalWrite(ledH, HIGH);
 oled.clearDisplay();
 oled.setTextSize(2);
 oled.setCursor(5, 0); 
 oled.println("PINTU BUKA");
 oled.setCursor(27, 20); 
 oled.println("SELAMA");
 oled.setCursor(20, 43); 
 oled.println("5 DETIK!");
 oled.display();
 delay(2000);
 for (int k=5; k>=0; k--) {
    oled.clearDisplay();
    oled.setTextSize(6);
    oled.setTextColor(SSD1306_WHITE);
    oled.setCursor(50, 10);
    oled.println(k);
    oled.display();
    delay(1000);
    if (k == 0) {
      digitalWrite(solenoid, HIGH);
      digitalWrite(ledH, LOW);
      oled.clearDisplay();
      oled.drawBitmap(0,0, sidikjari_bmp, LOGO_WIDTH, LOGO_HEIGHT, 1);
      oled.display();
      fingerprint_flags = 1;
      break;
    }
  }
}

void bunyi (int durasi) {
  digitalWrite(buzzer, HIGH);
  delay(durasi);
  digitalWrite(buzzer, LOW);
  delay(durasi);
}

// Mengkoneksikan Ke WIFI Router
void initWifi() {
  Serial.print("Connecting to: ");
  Serial.print(ssid);
  oled.clearDisplay();
  oled.setTextSize(2);             
  oled.setTextColor(SSD1306_WHITE);       
  oled.setCursor(5, 0);            
  oled.println("CONNECTING");
  oled.setCursor(50, 25); 
  oled.println("TO");
  oled.setCursor(5,48);
  oled.println((ssid));
  oled.display();
  delay(2000);

  WiFi.begin(ssid, password);
  int timeout = 10 * 4; // 10 seconds
  while (WiFi.status() != WL_CONNECTED  && (timeout-- > 0)) {
    delay(250);
    Serial.print(".");
  }

  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("Failed to connect, going back to sleep");
    oled.clearDisplay();
    oled.setTextSize(2);             // Normal 1:1 pixel scale
    oled.setTextColor(SSD1306_WHITE);        // Draw white text
    oled.setCursor(0, 30);            // Start at top-left corner
    oled.println(("Tidak \nTerhubung"));
    oled.display();
  }

  else {
    Serial.print("WiFi connected in: ");
    Serial.print(millis());
    Serial.print(", IP address: ");
    Serial.println(WiFi.localIP());
    oled.clearDisplay();
    oled.setTextSize(2);             // Normal 1:1 pixel scale
    oled.setTextColor(SSD1306_WHITE);        // Draw white text
    oled.setCursor(0, 30);            // Start at top-left corner
    oled.println(("Terhubung"));
    oled.display();
  }
  delay(2000);
}

//Membuat HTTP Request Ke IFTTT WEB Hook
void makeIFTTTRequest() {
  Serial.print("Connecting to ");
  Serial.print(server);

  WiFiClient client;
  int retries = 5;
  while (!!!client.connect(server, 80) && (retries-- > 0)) {
    Serial.print(".");
  }
  Serial.println();
  if (!!!client.connected()) {
    Serial.println("Failed to connect...");
  }

  Serial.print("Request resource: ");
  Serial.println(resource);

  // Temperature in Celsius
  String jsonObject = String("{\"value1\":\"") + ID + "\",\"value2\":\"" + MasukDengan + "\"}";

  client.println(String("POST ") + resource + " HTTP/1.1");
  client.println(String("Host: ") + server);
  client.println("Connection: close\r\nContent-Type: application/json");
  client.print("Content-Length: ");
  client.println(jsonObject.length());
  client.println();
  client.println(jsonObject);

  int timeout = 5 * 10; // 5 seconds
  while (!!!client.available() && (timeout-- > 0)) {
    delay(100);
  }
  if (!!!client.available()) {
    Serial.println("No response...");
  }
  while (client.available()) {
    Serial.write(client.read());
  }

  Serial.println("\nclosing connection");
  client.stop();
}

unsigned int IDsidikjari(void) {
  unsigned int ID_sidikjari = 0;
  String ID_e = "";
  int i = 0;
  oled.clearDisplay();
  oled.display();
  while (ID_e.length() < 3) {
    char customKey = customKeypad.getKey();
    oled.setTextColor(WHITE);
    oled.setTextSize(2);
    oled.setCursor(24, 0); 
    oled.println("MASUKAN");
    oled.setCursor(10, 17); 
    oled.println("ID ENROLL");
    oled.display();
    if (customKey != NO_KEY && isDigit(customKey) && customKey != 'B' && customKey != 'C') {
      ID_e += customKey;
      i = 0; // Inisialisasi ulang i untuk menampilkan ID
      ID_sidikjari = ID_e.toInt();
      oled.setTextSize(2);
      oled.setTextColor(SSD1306_WHITE);
      oled.setCursor(50, 40);
      oled.println(ID_e);
      oled.display();
      bunyi(100);

      // Memeriksa apakah nilai ID sudah sesuai batasan (tidak lebih besar dari 127)
      if (ID_sidikjari > 127) {
        // Jika ID lebih besar dari 127, atur kembali ID menjadi 0
        ID_sidikjari = 0;
        ID_e = "";
        return ID_sidikjari;
      }
    }

    if (customKey == '#') {
      // Jika '#' ditekan, kembalikan nilai ID yang telah dimasukkan
      return ID_sidikjari;
    }

    if (customKey == 'B') {
      i = 0;
      ID_e = "";
      ID_sidikjari = 0;
      return ID_sidikjari;
    }
  }

  if (ID_e.length() == 3) {
    // Mengembalikan nilai ID_sidikjari setelah panjang string mencapai 3
    return ID_sidikjari;
  }
}

void finger_enroll() {
  Serial.println("Ready to enroll a fingerprint!");
  Serial.println("Please type in the ID # (from 1 to 127) you want to save this finger as...");
  id = IDsidikjari();
  if (id == 0) {// ID #0 not allowed, try again!
    oled.clearDisplay();
    oled.setTextColor(WHITE);
    oled.setTextSize(2);
    oled.setCursor(50, 0); 
    oled.println("ID");
    oled.setCursor(40, 25); 
    oled.println("TIDAK ");
    oled.setCursor(2,48);
    oled.println("DIBOLEHKAN");
    oled.display();
    mp3_play(15);
    delay(2000);
    return;
  }
  if (checkFingerprintID(id)) {
    Serial.println("ID Telah Sudah Ada");
    oled.clearDisplay();
    oled.setTextColor(WHITE);
    oled.setTextSize(2);
    oled.setCursor(15, 0); 
    oled.println("ID SUDAH");
    oled.setCursor(10, 25); 
    oled.println("TERDAFTAR");
    oled.setCursor(3,48);
    oled.println("SEBELUMNYA");
    oled.display();
    mp3_play(14);
    delay(2500);
    return;
  }
  while (1) {
    getFingerprintEnroll();
    break;
  }
}

void enroll_f() {
  Serial2.begin(115200);
  delay(100);
  Serial.println("\n\nAdafruit Fingerprint sensor enrollment");

  // set the data rate for the sensor serial port
  finger.begin(57600);

  if (finger.verifyPassword()) {
    Serial.println("Found fingerprint sensor!");
  } else {
    Serial.println("Did not find fingerprint sensor :(");
    while (1) { delay(1); }
  }
}

unsigned int getFingerprintEnroll() {

  int p = -1;
  Serial.print("Waiting for valid finger to enroll as #"); Serial.println(id);
  mp3_play(7); 
  oled.clearDisplay();
  oled.setTextSize(2);
  oled.setTextColor(WHITE);
  oled.setCursor(25, 15);
  oled.println("LETAKAN");
  oled.setCursor(10, 35);
  oled.println("JARI ANDA");
  oled.display();
  delay(2000);
  while (p != FINGERPRINT_OK) {
    p = finger.getImage();
    switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image taken");
      break;
    case FINGERPRINT_NOFINGER:
      Serial.println(".");
      break;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      break;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");
      break;
    default:
      Serial.println("Unknown error");
      break;
    }
  }

  // OK success!

  p = finger.image2Tz(1);
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println("Image too messy");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Could not find fingerprint features");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }

  Serial.println("Remove finger");
  oled.clearDisplay();
  oled.setTextSize(2);
  oled.setTextColor(WHITE);
  oled.setCursor(30, 15);
  oled.println("ANGKAT");
  oled.setCursor(10, 35); 
  oled.println("JARI ANDA");
  oled.display();
  delay(2000);

  p = 0;
  while (p != FINGERPRINT_NOFINGER) {
    p = finger.getImage();
  }
  Serial.print("ID "); Serial.println(id);
  p = -1;
  Serial.println("Place same finger again");
  oled.clearDisplay();
  oled.setTextSize(2);
  oled.setCursor(25, 0); 
  oled.println("LETAKAN");
  oled.setCursor(25, 16); 
  oled.println("KEMBALI");
  oled.setCursor(10, 32); 
  oled.println("JARI YANG");
  oled.setCursor(40, 47); 
  oled.println("SAMA");
  oled.display();
  mp3_play(8);
  delay(2000);
  while (p != FINGERPRINT_OK) {
    p = finger.getImage();
    switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image taken");
      break;
    case FINGERPRINT_NOFINGER:
      Serial.print(".");
      break;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      break;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");
      break;
    default:
      Serial.println("Unknown error");
      break;
    }
  }

  // OK success!

  p = finger.image2Tz(2);
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println("Image too messy");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Could not find fingerprint features");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }

  // OK converted!
  Serial.print("Creating model for #");  Serial.println(id);

  p = finger.createModel();
  if (p == FINGERPRINT_OK) {
    Serial.println("Prints matched!");
    oled.clearDisplay();
    oled.setTextSize(2);             
    oled.setTextColor(SSD1306_WHITE);     
    oled.setCursor(40, 15); 
    oled.println("JARI");
    oled.setCursor(33, 33); 
    oled.println("COCOK!");
    oled.display();
    delay(1500);
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_ENROLLMISMATCH) {
    Serial.println("Fingerprints did not match");
    oled.clearDisplay();
    oled.setTextSize(2);             
    oled.setTextColor(SSD1306_WHITE);     
    oled.setCursor(5, 15); 
    oled.println("JARI TIDAK");
    oled.setCursor(33, 33); 
    oled.println("COCOK!");
    oled.display();
    bunyi(200);
    bunyi(200);
    return p;
  } else {
    Serial.println("Unknown error");
    return p;
  }

  Serial.print("ID "); Serial.println(id);
  p = finger.storeModel(id);
  if (p == FINGERPRINT_OK) {
    Serial.println("Stored!");
    oled.clearDisplay();
    oled.setTextSize(2);             
    oled.setTextColor(SSD1306_WHITE);     
    oled.setCursor(5, 15); 
    oled.println("JARI TELAH");
    oled.setCursor(5, 33); 
    oled.println("TERDAFTAR!");
    oled.display();
    mp3_play(6);
    delay(2000);
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_BADLOCATION) {
    Serial.println("Could not store in that location");
    return p;
  } else if (p == FINGERPRINT_FLASHERR) {
    Serial.println("Error writing to flash");
    return p;
  } else {
    Serial.println("Unknown error");
    return p;
  }
  return true;
}


void setup_finger() {
  finger.begin(57600);
  delay(5);
  if (finger.verifyPassword()) {
    Serial.println("Found fingerprint sensor!");
  } else {
    Serial.println("Did not find fingerprint sensor :(");
    while (1) { delay(1); }
  }

  finger.getTemplateCount();
  if (finger.templateCount == 0) {
    Serial.print("Sensor doesn't contain any fingerprint data. Please run the 'enroll' example.");
  }
  else {
    Serial.println("Waiting for valid finger...");
    Serial.print("Sensor contains "); Serial.print(finger.templateCount); Serial.println(" templates");
  }
}

void loop_finger() {
  getFingerprintIDez();
}

// unsigned int getFingerprintID() {
//   unsigned int p = finger.getImage();
//   switch (p) {
//     case FINGERPRINT_OK:
//       Serial.println("Image taken");
//       break;
//     case FINGERPRINT_NOFINGER:
//       Serial.println("No finger detected");
//       return p;
//     case FINGERPRINT_PACKETRECIEVEERR:
//       Serial.println("Communication error");
//       return p;
//     case FINGERPRINT_IMAGEFAIL:
//       Serial.println("Imaging error");
//       return p;
//     default:
//       Serial.println("Unknown error");
//       return p;
//   }

//   // OK success!

//   p = finger.image2Tz();
//   switch (p) {
//     case FINGERPRINT_OK:
//       Serial.println("Image converted");
//       break;
//     case FINGERPRINT_IMAGEMESS:
//       Serial.println("Image too messy");
//       return p;
//     case FINGERPRINT_PACKETRECIEVEERR:
//       Serial.println("Communication error");
//       return p;
//     case FINGERPRINT_FEATUREFAIL:
//       Serial.println("Could not find fingerprint features");
//       return p;
//     case FINGERPRINT_INVALIDIMAGE:
//       Serial.println("Could not find fingerprint features");
//       return p;
//     default:
//       Serial.println("Unknown error");
//       return p;
//   }

//   // OK converted!
//   p = finger.fingerSearch();
//   if (p == FINGERPRINT_OK) {
//     Serial.println("Found a print match!");
//     oled.clearDisplay();
//     oled.setTextSize(2);             
//     oled.setTextColor(SSD1306_WHITE);     
//     oled.setCursor(5, 15); 
//     oled.println("SIDIK JARI");
//     oled.setCursor(5, 33); 
//     oled.println("DITEMUKAN!");
//     digitalWrite(ledH, HIGH);
//     bunyi(1000);
//     oled.clearDisplay();
//     oled.drawBitmap(0,0, ceklist_bmp, CEKLIST_WIDTH, CEKLIST_HEIGHT, 1);
//     oled.display();
//     mp3_play(9);
//     delay(2000);
//   } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
//     Serial.println("Communication error");
//     return p;
//   } else if (p == FINGERPRINT_NOTFOUND) {
//     Serial.println("Did not find a match");
//     oled.clearDisplay();
//     oled.setTextSize(2);          
//     oled.setTextColor(SSD1306_WHITE);       
//     oled.setCursor(5, 0); 
//     oled.println("SIDIK JARI");
//     oled.setCursor(35, 20); 
//     oled.println("TIDAK");
//     oled.setCursor(7, 40); 
//     oled.println("DITEMUKAN!");
//     oled.display();
//     digitalWrite(ledM, HIGH);
//     delay(1000);
//     oled.clearDisplay();
//     oled.drawBitmap(0,0, silang_bmp, CROSS_WIDTH, LOGO_HEIGHT, 1);
//     oled.display();
//     bunyi(200);
//     bunyi(200);
//     mp3_play(3);
//     delay(3000);
    
//     oled.clearDisplay();
//     oled.drawBitmap(0,0, sidikjari_bmp, LOGO_WIDTH, LOGO_HEIGHT, 1);
//     oled.display();
//     digitalWrite(ledM, LOW);
//     return p;
//   } else {
//     Serial.println("Unknown error");
//     return p;
//   }

//   // found a match!
//   Serial.print("Found ID #"); Serial.print(finger.fingerID);
//   oled.clearDisplay();
//   oled.setTextSize(2);          
//   oled.setTextColor(SSD1306_WHITE);       
//   oled.setCursor(43, 15); 
//   oled.println("ID #");
//   oled.setCursor(50, 39); 
//   oled.println(finger.fingerID);
//   oled.display();
//   mp3_play(2);
//   delay(2000);
//   Serial.print(" with confidence of "); Serial.println(finger.confidence);
//   if (finger.confidence > 40) {
//     bukapintu();
//     ID = finger.fingerID;
//     MasukDengan = "Fingerprint";
//     makeIFTTTRequest();
//   }
//   return finger.fingerID;
// }

// returns -1 if failed, otherwise returns ID #
unsigned int getFingerprintIDez() {
  unsigned int p = finger.getImage();
  if (p != FINGERPRINT_OK)  return -1;

  p = finger.image2Tz();
  if (p != FINGERPRINT_OK)  return -1;

  p = finger.fingerFastSearch();
  if (p != FINGERPRINT_OK) {
    oled.clearDisplay();
    oled.setTextSize(2);          
    oled.setTextColor(SSD1306_WHITE);       
    oled.setCursor(5, 0); 
    oled.println("SIDIK JARI");
    oled.setCursor(35, 20); 
    oled.println("TIDAK");
    oled.setCursor(7, 40); 
    oled.println("DITEMUKAN!");
    oled.display();
    digitalWrite(ledM, HIGH);
    delay(1000);
    oled.clearDisplay();
    oled.drawBitmap(0,0, silang_bmp, CROSS_WIDTH, LOGO_HEIGHT, 1);
    oled.display();
    bunyi(200);
    bunyi(200);
    mp3_play(3);
    kesalahanJari++;
    delay(3000);
    
    oled.clearDisplay();
    oled.drawBitmap(0,0, sidikjari_bmp, LOGO_WIDTH, LOGO_HEIGHT, 1);
    oled.display();
    digitalWrite(ledM, LOW);
    return -1;
  }  

  // found a match!
  Serial.print("Found ID #"); Serial.print(finger.fingerID);
  Serial.print(" with confidence of "); Serial.println(finger.confidence);
  oled.clearDisplay();
  oled.setTextSize(2);             
  oled.setTextColor(SSD1306_WHITE);     
  oled.setCursor(5, 15); 
  oled.println("SIDIK JARI");
  oled.setCursor(5, 33); 
  oled.println("DITEMUKAN!");
  digitalWrite(ledH, HIGH);
  bunyi(1000);
  oled.clearDisplay();
  oled.drawBitmap(0,0, ceklist_bmp, CEKLIST_WIDTH, CEKLIST_HEIGHT, 1);
  oled.display();
  mp3_play(9);
  delay(2000);
  oled.clearDisplay();
  oled.setTextSize(2);          
  oled.setTextColor(SSD1306_WHITE);       
  oled.setCursor(43, 15); 
  oled.println("ID #");
  oled.setCursor(50, 39); 
  oled.println(finger.fingerID);
  oled.display();
  mp3_play(2);
  delay(2000);
  if (finger.confidence > 40) {
    bukapintu();
    ID = finger.fingerID;
    MasukDengan = "Fingerprint";
    makeIFTTTRequest();
    kesalahanJari = 0;
  }
  return finger.fingerID;
}

// setup delete finger
void setup_delete() {
  finger.begin(57600);
  delay(5);
  if (finger.verifyPassword()) {
    Serial.println("Found fingerprint sensor!");
  } 
  else {
    Serial.println("Did not find fingerprint sensor :(");
    while (1); 
  }
}

// fungsi IDdelete
unsigned int IDdelete (void) {
  unsigned int ID_delete = 0;
  String ID_D = "";
  int i = 0;
  oled.clearDisplay();
  oled.display();
  while (ID_D.length() < 3) {
    char customKey = customKeypad.getKey();
    tampilOled(2, 24, 0, "MASUKAN");
    tampilOled(2, 10, 17, "ID DELETE");
    oled.display();
    if (customKey != NO_KEY && isDigit(customKey) && customKey != 'B' && customKey != 'D') {
      ID_D += customKey;
      ID_delete = ID_D.toInt();
      tampilOled(2, 50, 40, ID_D);
      oled.display();
      bunyi(100);

      if (ID_delete > 127) {
        ID_D = "";
        ID_delete = 0;
        return ID_delete;
      }
    }

    if (customKey == '#') {
      return ID_delete;
    }

    if (customKey == 'B') {
      i = 0;
      ID_D = "";
      ID_delete = 0;
      return ID_delete;
    }
  }

  if (ID_D.length() == 3) {
    return ID_delete;
  }
}

/* lOOP DELETE */
void loop_delete() {
  id_delete = IDdelete();
  if (id_delete == 0) {
    oled.clearDisplay();
    oled.setTextColor(WHITE);
    oled.setTextSize(2);
    oled.setCursor(50, 0); 
    oled.println("ID");
    oled.setCursor(40, 25); 
    oled.println("TIDAK ");
    oled.setCursor(2,48);
    oled.println("DIBOLEHKAN");
    oled.display();
    mp3_play(15);
    delay(2000);
    return;
  }

  if (checkFingerprintIDdelete(id_delete)) {
    oled.clearDisplay();
    tampilOled(2, 10, 0, "JARI YANG");
    tampilOled(2, 20, 23, "DIHAPUS");
    tampilOled(2, 10, 45, "TIDAK ADA");
    oled.display();
    mp3_play(18);
    delay(2000);
    return;
  }
  while (1) {
    deleteFingerprint(id_delete);
    break;
  }
}

unsigned int deleteFingerprint(unsigned int id_delete) {
  unsigned int p = -1;

  p = finger.deleteModel(id_delete);

  if (p == FINGERPRINT_OK) {
    Serial.println("Deleted!");
    oled.clearDisplay();
    oled.setTextColor(WHITE);
    oled.setTextSize(2);
    oled.setCursor(50, 0); 
    oled.println("ID");
    oled.setCursor(40, 25); 
    oled.println("TELAH");
    oled.setCursor(4,48);
    oled.println("DIHAPUS!");
    oled.display();
    mp3_play(19);
    delay(2000);
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");
  } else if (p == FINGERPRINT_BADLOCATION) {
    Serial.println("Could not delete in that location");
  } else if (p == FINGERPRINT_FLASHERR) {
    Serial.println("Error writing to flash");
  } else {
    Serial.print("Unknown error: 0x"); Serial.println(p, HEX);
  }
  return p;
}

//Fungsi Mencek apakah sidik jari sudah terdaftarkan pada enroll
bool checkFingerprintID(unsigned int id) {
  unsigned int p = finger.loadModel(id);
  if (p == FINGERPRINT_OK) {
    Serial.println("ID sidik jari terdaftar");
    return true;
  } else {
    Serial.println("ID sidik jari belum terdaftar");
    return false;
  }
}

//Fungsi Mencek apakah sidik jari sudah terdaftarkan pada delete
bool checkFingerprintIDdelete(unsigned int id) {
  unsigned int p = finger.loadModel(id);
  if (p == FINGERPRINT_OK) {
    Serial.println("ID sidik jari terdaftar");
    return false;
  } else {
    Serial.println("ID sidik jari TIDAK ADA");
    return true;
  }
}

//Fungsi Menampilkan OLED 
void tampilOled(int textSize, int x, int y, String text) {
  oled.setTextSize(textSize);
  oled.setTextColor(SSD1306_WHITE); // Set warna teks langsung ke putih
  oled.setCursor(x, y);
  oled.println(text);
}

void contoh () {
  String typedSentence = "";
  if (typedSentence.length() > 0) {
    typedSentence.remove(typedSentence.length() - 1);
  }
}
